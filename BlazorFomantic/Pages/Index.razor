@page "/"

<UiSegment Build="@BuildTitleSegment">
    <h3>Welcome to my experimental C# blogging platform.</h3>
    <hr/>
    <p>
        Welcome to the world of doing things.
    </p>

    <UiSegment Build="@BuildSubSegment">
        <h4>What to do?</h4>

        <EditForm Model="model" class="ui form">
            <UiTextBox Label="Title" Name="first-name" @bind-Value="@model.Description"/>
          
            <UiButton Primary="true" Text="Add" Clicked="ClickedClickMe"></UiButton>
        </EditForm>


    </UiSegment>

    <UiSegment>
        <EditForm Model="thingsToDo" class="ui form">
            <div class="ui divided list">
                @foreach (var todoItem in thingsToDo)
                {
                    <a class="item">

                        <div class="content">
                            <div class="header">
                                <UiCheckBox @bind-Value="@todoItem.Done" Label="@todoItem.Description"></UiCheckBox>
                            </div>
                            
                        </div>
                    </a>
                }

            </div>

        </EditForm>
    </UiSegment>

</UiSegment>


<UiToast @ref=_toastRef></UiToast>

@code
{
    private UiSegment _anotherSegment;

    List<TodoItem> thingsToDo = new();

    private class TodoItem
    {
        public bool Done { get; set; }
        
        public string? Description { get; set; }
    }


    TodoItem model = new();

    public async Task BuildTitleSegment(SegmentBuilder segmentBuilder)
    {
        //segmentBuilder.Raise();
    }

    public async Task BuildSubSegment(SegmentBuilder segmentBuilder)
    {
        segmentBuilder.WithEmphasis(SegmentEmphasis.Secondary);
    }

    public async Task ClickedClickMe()
    {
        thingsToDo.Add(model);
        await _toastRef.ShowToast(new UiToast.ToastData
        {
            Message = $"{model.Description}",
            Title = "Added Item!",
            ShowProgress = "bottom"
        });
        model = new();
    }

    private UiToast _toastRef;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}