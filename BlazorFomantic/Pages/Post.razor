@page "/posts/{fileName}"
@using Markdig
@using Markdig.SemanticUi
@using System.Net
@using Markdig.SyntaxHighlighting
@inject HttpClient Http

<UiSegment>
    @if (loaded)
    {
        @postText
    }
    else
    {
        <div class="ui placeholder">
            <div class="header">
                <div class="line"></div>
            </div>
            <div class="paragraph">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
            </div>
            <div class="paragraph">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
            </div>
            <div class="paragraph">
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
                <div class="line"></div>
            </div>
        </div>
    }

</UiSegment>


@code {

    [Parameter]
    public string FileName { get; set; }

    private MarkupString postText;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        postText = await LoadPost(FileName);
        loaded = true;
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task<MarkupString> LoadPost(string postFile)
    {
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseEmojiAndSmiley()
            .UseSyntaxHighlighting()
            .UseSemanticUi()
            .Build();

        var text = await Http.GetStringAsync($"/blog_data/posts/{FileName}.md");
        var html = Markdig.Markdown.ToHtml(text, pipeline);

        return (MarkupString) html; // or new MarkupString(html)
    }

}